import com.android.build.api.dsl.ManagedVirtualDevice

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'androidx.navigation.safeargs'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'org.jetbrains.kotlin.android'
    id 'app.cash.exhaustive'
    id 'kotlin-parcelize'
    id 'com.squareup.wire'
    id 'translations'
    id 'licenses'
}

apply from: 'static-ips.gradle'

wire {
    kotlin {
        javaInterop = true
    }

    sourcePath {
        srcDir 'src/main/protowire'
    }

    protoPath {
        srcDir "${project.rootDir}/libsignal-service/src/main/protowire"
    }
}

ktlint {
    version = "0.49.1"
}

def canonicalVersionCode = 1354
def canonicalVersionName = "6.39.0"

def postFixSize = 100
def abiPostFix = ['universal'   : 0,
                  'armeabi-v7a' : 1,
                  'arm64-v8a'   : 2,
                  'x86'         : 3,
                  'x86_64'      : 4]

def keystoreProperties = loadKeystoreProperties('keystore.debug.properties')

def selectableVariants = [
        'playDebug',
        'playRelease',
        'websiteDebug',
        'websiteRelease',
]

android {
    namespace 'org.thoughtcrime.securesms'

    buildToolsVersion = signalBuildToolsVersion
    compileSdkVersion = signalCompileSdkVersion

    flavorDimensions 'distribution'
    useLibrary 'org.apache.http.legacy'
    testBuildType 'instrumentation'

    kotlinOptions {
        jvmTarget = signalKotlinJvmTarget
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    signingConfigs {
        debug {
            storeFile file("${project.rootDir}/../qianli-docs/android/qianli-android-key.jks")
            storePassword keystoreProperties.storePassword
            keyAlias keystoreProperties.keyAlias
            keyPassword keystoreProperties.keyPassword
        }

        release {
            storeFile file("${project.rootDir}/../qianli-docs/android/qianli-android-key.jks")
            storePassword keystoreProperties.storePassword
            keyAlias keystoreProperties.keyAlias
            keyPassword keystoreProperties.keyPassword
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        unitTests {
            includeAndroidResources = true
        }

        managedDevices {
            devices {
                pixel3api30 (ManagedVirtualDevice) {
                    device = "Pixel 3"
                    apiLevel = 30
                    systemImageSource = "google-atd"
                    require64Bit = false
                }
            }
        }
    }


    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/testShared"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/testShared"
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility signalJavaVersion
        targetCompatibility signalJavaVersion
    }

    packagingOptions {
        resources {
            excludes += ['LICENSE.txt', 'LICENSE', 'NOTICE', 'asm-license.txt', 'META-INF/LICENSE', 'META-INF/LICENSE.md', 'META-INF/NOTICE', 'META-INF/LICENSE-notice.md', 'META-INF/proguard/androidx-annotations.pro', 'libsignal_jni.dylib', 'signal_jni.dll']
        }
    }


    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = '1.4.4'
    }

    defaultConfig {
        applicationId "chat.qianli.android"
        versionCode canonicalVersionCode * postFixSize
        versionName canonicalVersionName

        minSdkVersion signalMinSdkVersion
        targetSdkVersion signalTargetSdkVersion

        multiDexEnabled true

        vectorDrawables.useSupportLibrary = true
        project.ext.set("archivesBaseName", "Signal")

        manifestPlaceholders = [mapsKey:"AIzaSyCSx9xea86GwDKGznCAULE9Y5a8b-TfN9U"]

        buildConfigField "long", "BUILD_TIMESTAMP", getLastCommitTimestamp() + "L"
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        buildConfigField "String", "SIGNAL_URL", "\"https://msg.qianli.chat\""
//        buildConfigField "String", "STORAGE_URL", "\"https://storage.qianli.chat\""
        buildConfigField "String", "SIGNAL_CDN_URL", "\"https://cdn.qianli.chat\""
        buildConfigField "String", "SIGNAL_CDN_URL2", "\"https://cdn2.qianli.chat\""
        buildConfigField "String", "SIGNAL_SERVICE_STATUS_URL", "\"uptime.signal.org\""
        buildConfigField "String", "SIGNAL_SFU_URL", "\"https://sfu.voip.signal.org\""
        buildConfigField "String", "SIGNAL_STAGING_SFU_URL", "\"https://sfu.staging.voip.signal.org\""
        buildConfigField "String[]", "SIGNAL_SFU_INTERNAL_NAMES", "new String[]{\"Test\", \"Staging\", \"Development\"}"
        buildConfigField "String[]", "SIGNAL_SFU_INTERNAL_URLS", "new String[]{\"https://sfu.test.voip.signal.org\", \"https://sfu.staging.voip.signal.org\", \"https://sfu.staging.test.voip.signal.org\"}"
        buildConfigField "String", "CONTENT_PROXY_HOST", "\"contentproxy.signal.org\""
        buildConfigField "int", "CONTENT_PROXY_PORT", "443"
        buildConfigField "String[]", "SIGNAL_SERVICE_IPS", service_ips
        buildConfigField "String[]", "SIGNAL_STORAGE_IPS", storage_ips
        buildConfigField "String[]", "SIGNAL_KBS_IPS", kbs_ips
        buildConfigField "String[]", "SIGNAL_SFU_IPS", sfu_ips
        buildConfigField "String[]", "SIGNAL_CONTENT_PROXY_IPS", content_proxy_ips
        buildConfigField "String", "SIGNAL_AGENT", "\"OWA\""
        buildConfigField "String", "CDSI_MRENCLAVE", "\"0f6fd79cdfdaa5b2e6337f534d3baf999318b0c462a7ac1f41297a3e4b424a57\""
        buildConfigField "String", "SVR2_MRENCLAVE", "\"6ee1042f9e20f880326686dd4ba50c25359f01e9f733eeba4382bca001d45094\""
        buildConfigField "String", "UNIDENTIFIED_SENDER_TRUST_ROOT", "\"CikI/5Pr3AMSIQWVOGDsxsFbrsOwLnOA/hBOEdIggte3CtmS7Sm/qWyQFxJAK+FfJk/YIqntoFAYSJMknuDHSz0dztH2aFgwWzthZfzGAOX6VNn+92aXHj/rWxN1lp8UqEY0Mbs8ogMURUOZjQ==\""
        buildConfigField "String", "ZKGROUP_SERVER_PUBLIC_PARAMS", "\"APK4KB+XRYH77d4rQHQV6RDjJGdKBOfuCeVHEy1k56A7RJGZCNqYWic30e1pKJ29zsmTgkHxS+QYKIXnAud8DQFk+COMT1Dg3UnizFVHOf3BWyjFcnZDJED6TW06UiCRRYLuurrGKu1WpjDxhdOUh8wPGFpd3l6oAy6dJBQHutgObFdlLffYptIqWTvcCMvUvY9D+3u3H1HxSa41xRe5sVjyR4Y7Yy56RH1PuyHAvS1MrL63+ZnBnV6m80T25DZDXORLMEmD/QwM5q4TxdGhxk4ny0eu/FMKKLq+93CS0ZM7lO8DqJlQ58QzKXnNyyivS4p7cDgxzezntrwa4OliUys8fA2Ms/yfjCFaksHVHuEU7u0gX+7Vdt2vRmFgP7PdLqTttxcXbsm5g6HstDadLV7Zz4gXmhAUchJjJaYILc1TPjU/9I4zLohJAr+2I1NT5PC49dnv17rm0HItcZUl5SxMrbnOF7n1colBocW8DIwpk3gzN/3XTcRyDKTrcQyDUMKWVUux4avxV/HIK2qTNG/UXp8PV3sq3a7E/eihezQm\""
        buildConfigField "String", "GENERIC_SERVER_PUBLIC_PARAMS", "\"AHQAzgV4gJLLpHvyDpdXwc9kwm5TS2aZtJYKvWJz+Rp83p//V+74+pHoBdSC6gAYXC6YVmFT8tY712rvoVlpWW/4V7z1dhvUIrIVObwBU0SGZmzDTOsDtadhNF5v0fJAdW6Dsic701tar5cxjZX6EBeUqoHO042KvBcmcAn/VXVIqpQ38NTHV28E9MpJrlxbwLhTwAiyEx55rEm4FnYd7gyEJgwQqeohBpC1tSM2/mziBK6TVol5Da7o6/Q11zIOEJAsbl5Mozk/uYPXbayYJNzH82E2jKonJwyC1T4YnEQQ\""
        buildConfigField "String[]", "LANGUAGES", "new String[]{\"" + autoResConfig().collect { s -> s.replace('-r', '_') }.join('", "') + '"}'
        buildConfigField "int", "CANONICAL_VERSION_CODE", "$canonicalVersionCode"
        buildConfigField "String", "DEFAULT_CURRENCIES", "\"EUR,AUD,GBP,CAD,CNY\""
        buildConfigField "String", "GIPHY_API_KEY", "\"3o6ZsYH6U6Eri53TXy\""
        buildConfigField "String", "SIGNAL_CAPTCHA_URL", "\"https://signalcaptchas.org/registration/generate.html\""
        buildConfigField "String", "RECAPTCHA_PROOF_URL", "\"https://signalcaptchas.org/challenge/generate.html\""

        buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"unset\""
        buildConfigField "String", "BUILD_ENVIRONMENT_TYPE", "\"unset\""
        buildConfigField "String", "BUILD_VARIANT_TYPE", "\"unset\""
        buildConfigField "String", "BADGE_STATIC_ROOT", "\"https://updates2.signal.org/static/badges/\""
        buildConfigField "String", "STRIPE_PUBLISHABLE_KEY", "\"pk_live_6cmGZopuTsV8novGgJJW9JpC00vLIgtQ1D\""
        buildConfigField "boolean", "TRACING_ENABLED", "false"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        resourceConfigurations += []


        splits {
            abi {
                enable !project.hasProperty('generateBaselineProfile')
                reset()
                include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                universalApk true
            }
        }

        testInstrumentationRunner "org.thoughtcrime.securesms.testing.SignalTestRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            isDefault true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard/proguard-firebase-messaging.pro',
                    'proguard/proguard-google-play-services.pro',
                    'proguard/proguard-jackson.pro',
                    'proguard/proguard-sqlite.pro',
                    'proguard/proguard-appcompat-v7.pro',
                    'proguard/proguard-square-okhttp.pro',
                    'proguard/proguard-square-okio.pro',
                    'proguard/proguard-rounded-image-view.pro',
                    'proguard/proguard-glide.pro',
                    'proguard/proguard-shortcutbadger.pro',
                    'proguard/proguard-retrofit.pro',
                    'proguard/proguard-webrtc.pro',
                    'proguard/proguard-klinker.pro',
                    'proguard/proguard-mobilecoin.pro',
                    'proguard/proguard-retrolambda.pro',
                    'proguard/proguard-okhttp.pro',
                    'proguard/proguard-ez-vcard.pro',
                    'proguard/proguard.cfg'
            testProguardFiles 'proguard/proguard-automation.pro',
                    'proguard/proguard.cfg'

            manifestPlaceholders = [mapsKey:getMapsKey()]

            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Debug\""
        }

        instrumentation {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
            applicationIdSuffix ".instrumentation"

            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Instrumentation\""
        }

        spinner {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Spinner\""
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles = buildTypes.debug.proguardFiles
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Release\""
        }

        perf {
            initWith debug
            isDefault false
            debuggable false
            minifyEnabled true
            matchingFallbacks = ['debug']
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Perf\""
            buildConfigField "boolean", "TRACING_ENABLED", "true"
        }

        benchmark {
            initWith debug
            isDefault false
            debuggable false
            minifyEnabled true
            matchingFallbacks = ['debug']
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Benchmark\""
            buildConfigField "boolean", "TRACING_ENABLED", "true"
        }

        canary {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Canary\""
        }
    }

    productFlavors {
        play {
            dimension 'distribution'
            buildConfigField "boolean", "MANAGES_APP_UPDATES", "false"
            buildConfigField "String", "APK_UPDATE_MANIFEST_URL", "null"
            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"play\""
        }

        website {
            dimension 'distribution'
            isDefault true
            ext.websiteUpdateUrl = "https://updates.qianli.chat/android"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "true"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "\"$ext.websiteUpdateUrl\""
            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"website\""
        }

    }

    lint {
        abortOnError true
        baseline file('lint-baseline.xml')
        checkReleaseBuilds false
        disable 'LintError'
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.baseName.contains('nightly')) {
                output.versionCodeOverride = canonicalVersionCode * postFixSize + 5
                def tag = getCurrentGitTag()
                if (tag != null && tag.length() > 0) {
                    if (tag.startsWith("v")) {
                        tag = tag.substring(1)
                    }
                    output.versionNameOverride = tag
                    output.outputFileName = output.outputFileName.replace(".apk", "-${output.versionNameOverride}.apk")
                } else {
                    output.outputFileName = output.outputFileName.replace(".apk", "-${variant.versionName}.apk")
                }
            } else {
                output.outputFileName = output.outputFileName.replace(".apk", "-${variant.versionName}.apk")
                def abiName = output.getFilter("ABI") ?: 'universal'
                def postFix = abiPostFix.get(abiName, 0)

                if (postFix >= postFixSize) throw new AssertionError("postFix is too large")

                output.versionCodeOverride = canonicalVersionCode * postFixSize + postFix
            }
        }
    }

    android.variantFilter { variant ->
        def distribution = variant.getFlavors().get(0).name
        def buildType    = variant.buildType.name
        def fullName     = distribution + buildType.capitalize()

        if (!selectableVariants.contains(fullName)) {
            variant.setIgnore(true)
        }
    }

    android.buildTypes.each {
        if (it.name != 'release') {
            sourceSets.findByName(it.name).java.srcDirs += "$projectDir/src/debug/java"
        } else {
            sourceSets.findByName(it.name).java.srcDirs += "$projectDir/src/release/java"
        }
    }
}

dependencies {
    implementation libs.androidx.fragment.ktx
    lintChecks project(':lintchecks')

    coreLibraryDesugaring libs.android.tools.desugar

    implementation (libs.androidx.appcompat) {
        version {
            strictly '1.6.1'
        }
    }
    implementation libs.androidx.window.window
    implementation libs.androidx.window.java
    implementation libs.androidx.recyclerview
    implementation libs.material.material
    implementation libs.androidx.legacy.support
    implementation libs.androidx.preference
    implementation libs.androidx.legacy.preference
    implementation libs.androidx.gridlayout
    implementation libs.androidx.exifinterface
    implementation libs.androidx.compose.rxjava3
    implementation libs.androidx.compose.runtime.livedata
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.multidex
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.process
    implementation libs.androidx.lifecycle.viewmodel.savedstate
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.reactivestreams.ktx
    implementation libs.androidx.camera.core
    implementation libs.androidx.camera.camera2
    implementation libs.androidx.camera.lifecycle
    implementation libs.androidx.camera.view
    implementation libs.androidx.concurrent.futures
    implementation libs.androidx.autofill
    implementation libs.androidx.biometric
    implementation libs.androidx.sharetarget
    implementation libs.androidx.profileinstaller
    implementation libs.androidx.asynclayoutinflater
    implementation libs.androidx.asynclayoutinflater.appcompat

    implementation (libs.firebase.messaging) {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    implementation libs.google.play.services.maps
    implementation libs.google.play.services.auth

    implementation libs.bundles.media3

    implementation libs.conscrypt.android
    implementation libs.signal.aesgcmprovider

    implementation project(':libsignal-service')
    implementation project(':paging')
    implementation project(':core-util')
    implementation project(':glide-config')
    implementation project(':video')
    implementation project(':device-transfer')
    implementation project(':image-editor')
    implementation project(':donations')
    implementation project(':contacts')
    implementation project(':qr')
    implementation project(':sms-exporter')
    implementation project(':sticky-header-grid')
    implementation project(':photoview')
    implementation project(':glide-webp')

    implementation libs.libsignal.android

    implementation libs.mobilecoin

    implementation libs.signal.ringrtc

    implementation libs.leolin.shortcutbadger
    implementation libs.emilsjolander.stickylistheaders
    implementation libs.apache.httpclient.android
    implementation libs.glide.glide
    implementation libs.roundedimageview
    implementation libs.materialish.progress
    implementation libs.greenrobot.eventbus
    implementation libs.google.zxing.android.integration
    implementation libs.google.zxing.core
    implementation libs.google.flexbox
    implementation (libs.subsampling.scale.image.view) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation (libs.android.tooltips) {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation (libs.android.smsmms) {
        exclude group: 'com.squareup.okhttp', module: 'okhttp'
        exclude group: 'com.squareup.okhttp', module: 'okhttp-urlconnection'
    }
    implementation libs.stream

    implementation libs.lottie

    implementation libs.signal.android.database.sqlcipher
    implementation libs.androidx.sqlite

    implementation (libs.google.ez.vcard) {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'org.freemarker'
    }
    implementation libs.dnsjava
    implementation libs.kotlinx.collections.immutable
    implementation libs.accompanist.permissions

    spinnerImplementation project(":spinner")

    canaryImplementation libs.square.leakcanary

    testImplementation testLibs.junit.junit
    testImplementation testLibs.assertj.core
    testImplementation testLibs.mockito.core
    testImplementation testLibs.mockito.kotlin

    testImplementation testLibs.androidx.test.core
    testImplementation (testLibs.robolectric.robolectric) {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    testImplementation testLibs.robolectric.shadows.multidex
    testImplementation (testLibs.bouncycastle.bcprov.jdk15on) { version { strictly "1.70" } } // Used by roboelectric
    testImplementation (testLibs.bouncycastle.bcpkix.jdk15on) { version { strictly "1.70" } } // Used by roboelectric
    testImplementation testLibs.conscrypt.openjdk.uber // Used by robolectric
    testImplementation testLibs.hamcrest.hamcrest
    testImplementation testLibs.mockk

    testImplementation(testFixtures(project(":libsignal-service")))

    androidTestImplementation testLibs.androidx.test.ext.junit
    androidTestImplementation testLibs.espresso.core
    androidTestImplementation testLibs.androidx.test.core
    androidTestImplementation testLibs.androidx.test.core.ktx
    androidTestImplementation testLibs.androidx.test.ext.junit.ktx
    androidTestImplementation testLibs.mockito.android
    androidTestImplementation testLibs.mockito.kotlin
    androidTestImplementation testLibs.mockk.android
    androidTestImplementation testLibs.square.okhttp.mockserver

    instrumentationImplementation (libs.androidx.fragment.testing) {
        exclude group: 'androidx.test', module: 'core'
    }

    testImplementation testLibs.espresso.core

    implementation libs.kotlin.stdlib.jdk8
    implementation libs.kotlin.reflect
    implementation libs.jackson.module.kotlin

    implementation libs.rxjava3.rxandroid
    implementation libs.rxjava3.rxkotlin
    implementation libs.rxdogtag

    androidTestUtil testLibs.androidx.test.orchestrator

    implementation project(':core-ui')
    ktlintRuleset libs.ktlint.twitter.compose
}

def getLastCommitTimestamp() {
    if (!(new File('.git').exists())) {
        return System.currentTimeMillis().toString()
    }

    new ByteArrayOutputStream().withStream { os ->
        exec {
            executable = 'git'
            args = ['log', '-1', '--pretty=format:%ct']
            standardOutput = os
        }

        return os.toString() + "000"
    }
}

def getGitHash() {
    if (!(new File('.git').exists())) {
        throw new IllegalStateException("Must be a git repository to guarantee reproducible builds! (git hash is part of APK)")
    }

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(0, 12)
}

def getCurrentGitTag() {
    if (!(new File('.git').exists())) {
        throw new IllegalStateException("Must be a git repository to guarantee reproducible builds! (git hash is part of APK)")
    }

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '--points-at', 'HEAD'
        standardOutput = stdout
    }

    def output = stdout.toString().trim()

    if (output != null && output.size() > 0) {
        def tags = output.split('\n').toList()
        return tags.stream().filter(t -> t.contains('nightly')).findFirst().orElse(tags.get(0))
    } else {
        return null
    }
}

tasks.withType(Test) {
    testLogging {
        events "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

project.tasks.configureEach { task ->
    if (task.name.toLowerCase().contains("nightly") && task.name != 'checkNightlyParams') {
        task.dependsOn checkNightlyParams
    }
}

tasks.register('checkNightlyParams') {
    doFirst {
        if (project.gradle.startParameter.taskNames.any { it.toLowerCase().contains("nightly") }) {
            if (!project.hasProperty('nightlyApkUpdateManifestUrl')) {
                throw new GradleException("Required command-line parameter 'nightlyApkUpdateManifestUrl' not found for nightly build!")
            }
        }
    }
}


def loadKeystoreProperties(filename) {
    def keystorePropertiesFile = file("${project.rootDir}/../qianli-docs/android/keystore.properties")
    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        return keystoreProperties
    } else {
        return null
    }
}

static def getDateSuffix() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH:mm')
    return formattedDate
}

def getMapsKey() {
    def mapKey = file("${project.rootDir}/maps.key")
    if (mapKey.exists()) {
        return mapKey.readLines()[0]
    }
    return "AIzaSyCSx9xea86GwDKGznCAULE9Y5a8b-TfN9U"
}
